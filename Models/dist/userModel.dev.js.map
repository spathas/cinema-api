{"version":3,"sources":["userModel.js"],"names":["crypto","require","mongoose","validator","bcrypt","userSchema","Schema","name","type","String","required","email","unique","lowercase","validate","isEmail","photo","role","password","minlength","select","passwordConfirm","el","message","passwordChangedAt","Date","passwordResetToken","passwordResetExpires","active","Boolean","User","model","module","exports"],"mappings":";;AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAME,SAAS,GAAGF,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMG,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AAEA,IAAMI,UAAU,GAAG,IAAIH,QAAQ,CAACI,MAAb,CAAoB;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,2BAAP;AAFN,GAD+B;AAKrCC,EAAAA,KAAK,EAAE;AACLH,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,2BAAP,CAFL;AAGLE,IAAAA,MAAM,EAAE,IAHH;AAILC,IAAAA,SAAS,EAAE,IAJN;AAKLC,IAAAA,QAAQ,EAAE,CAACX,SAAS,CAACY,OAAX,EAAoB,8BAApB;AALL,GAL8B;AAYrCC,EAAAA,KAAK,EAAEP,MAZ8B;AAarCQ,EAAAA,IAAI,EAAE;AACJT,IAAAA,IAAI,EAAEC,MADF;AAEJ,YAAM,CAAC,MAAD,EAAS,OAAT,CAFF;AAGJ,eAAS;AAHL,GAb+B;AAkBrCS,EAAAA,QAAQ,EAAE;AACRV,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,2BAAP,CAFF;AAGRS,IAAAA,SAAS,EAAE,CAHH;AAIRC,IAAAA,MAAM,EAAE;AAJA,GAlB2B;AAwBrCC,EAAAA,eAAe,EAAE;AACfb,IAAAA,IAAI,EAAEC,MADS;AAEfC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,8BAAP,CAFK;AAGfI,IAAAA,QAAQ,EAAE;AACR;AACAX,MAAAA,SAAS,EAAE,mBAASmB,EAAT,EAAa;AACtB,eAAOA,EAAE,KAAK,KAAKJ,QAAnB;AACD,OAJO;AAKRK,MAAAA,OAAO,EAAE;AALD;AAHK,GAxBoB;AAmCrCC,EAAAA,iBAAiB,EAAEC,IAnCkB;AAoCrCC,EAAAA,kBAAkB,EAAEjB,MApCiB;AAqCrCkB,EAAAA,oBAAoB,EAAEF,IArCe;AAsCrCG,EAAAA,MAAM,EAAE;AACNpB,IAAAA,IAAI,EAAEqB,OADA;AAEN,eAAS,IAFH;AAGNT,IAAAA,MAAM,EAAE;AAHF;AAtC6B,CAApB,CAAnB,C,CA6CA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;;AAEA,IAAMU,IAAI,GAAG5B,QAAQ,CAAC6B,KAAT,CAAe,MAAf,EAAuB1B,UAAvB,CAAb;AAEA2B,MAAM,CAACC,OAAP,GAAiBH,IAAjB","sourcesContent":["const crypto = require('crypto');\nconst mongoose = require('mongoose');\nconst validator = require('validator');\nconst bcrypt = require('bcryptjs');\n\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: [true, 'Please tell us your name!']\n  },\n  email: {\n    type: String,\n    required: [true, 'Please provide your email'],\n    unique: true,\n    lowercase: true,\n    validate: [validator.isEmail, 'Please provide a valid email']\n  },\n  photo: String,\n  role: {\n    type: String,\n    enum: ['user', 'admin'],\n    default: 'user'\n  },\n  password: {\n    type: String,\n    required: [true, 'Please provide a password'],\n    minlength: 8,\n    select: false\n  },\n  passwordConfirm: {\n    type: String,\n    required: [true, 'Please confirm your password'],\n    validate: {\n      // This only works on CREATE and SAVE!!!\n      validator: function(el) {\n        return el === this.password;\n      },\n      message: 'Passwords are not the same!'\n    }\n  },\n  passwordChangedAt: Date,\n  passwordResetToken: String,\n  passwordResetExpires: Date,\n  active: {\n    type: Boolean,\n    default: true,\n    select: false\n  }\n});\n\n// // Change password for user functionality.\n// userSchema.pre('save', async function(next) {\n//   // Only run this function if password was actually modified\n//   if (!this.isModified('password')) return next();\n\n//   // Hash the password with cost of 12\n//   this.password = await bcrypt.hash(this.password, 12);\n\n//   // Delete passwordConfirm field\n//   this.passwordConfirm = undefined;\n//   next();\n// });\n\n// userSchema.pre('save', function(next) {\n//   if (!this.isModified('password') || this.isNew) return next();\n\n//   this.passwordChangedAt = Date.now() - 1000;\n//   next();\n// });\n\n// // Delete user functionality.\n// userSchema.pre(/^find/, function(next) {\n//   // this points to the current query\n//   this.find({ active: { $ne: false } });\n//   next();\n// });\n\n// // Compare passwords to validate.\n// userSchema.methods.correctPassword = async function(\n//   candidatePassword,\n//   userPassword\n// ) {\n//   return await bcrypt.compare(candidatePassword, userPassword);\n// };\n\n// userSchema.methods.changedPasswordAfter = function(JWTTimestamp) {\n//   if (this.passwordChangedAt) {\n//     const changedTimestamp = parseInt(\n//       this.passwordChangedAt.getTime() / 1000,\n//       10\n//     );\n\n//     return JWTTimestamp < changedTimestamp;\n//   }\n\n//   // False means NOT changed\n//   return false;\n// };\n\n// userSchema.methods.createPasswordResetToken = function() {\n//   const resetToken = crypto.randomBytes(32).toString('hex');\n\n//   this.passwordResetToken = crypto\n//     .createHash('sha256')\n//     .update(resetToken)\n//     .digest('hex');\n\n//   console.log({ resetToken }, this.passwordResetToken);\n\n//   this.passwordResetExpires = Date.now() + 10 * 60 * 1000;\n\n//   return resetToken;\n// };\n\nconst User = mongoose.model('User', userSchema);\n\nmodule.exports = User;\n"],"file":"userModel.dev.js"}