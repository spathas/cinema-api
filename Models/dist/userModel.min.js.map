{"version":3,"sources":["userModel.js"],"names":["crypto","require","mongoose","bcrypt","userSchema","Schema","name","validator","type","String","email","required","lowercase","isEmail","unique","validate","default","role","minlength","select","passwordConfirm","el","this","password","passwordChangedAt","Date","passwordResetToken","message","active","Boolean","User","model","module","exports"],"mappings":"aAAA,IAAMA,OAASC,QAAQ,UACjBC,SAAWD,QAAQ,YADnBD,UAASC,QAAQ,aAGjBE,OAASF,QAAQ,YAEjBG,WAAa,IAAIF,SAASG,OAAO,CAHvCC,KAAMC,CAKFC,KAAMC,OAJJN,SAASF,EAAAA,EAAQ,8BAEvBS,MAAMN,CACJE,KAAMG,OACJD,SAAMC,EAAAA,EADF,6BAEJE,QAAQ,EAH2BC,WAAA,EAKrCF,SAAO,CAAAH,UAAAM,QAAA,iCAELF,MAAAA,OACAG,KAAAA,CACAF,KAAAA,OACAG,KAAAA,CAAAA,OAAWR,SAVwBS,QAAA,QAarCC,SAAM,CACJT,KAAMC,OACNE,SAAO,EAAA,EAAQ,6BACfO,UAAS,EAhB0BC,QAAA,GAmBnCX,gBADQ,CAERG,KAAAA,OACAO,SAAS,EAAE,EAHH,gCAIRC,SAAQ,CAEVC,UAAe,SAAEC,GACX,OAAEZ,IADSa,KAAAC,UAGfR,QAAU,gCAGNS,kBAASC,KACVC,mBAJOjB,OAKRkB,qBAASF,KALDG,OAAA,CA3ByBpB,KAAAqB,QAmCrCL,SAAAA,EACAE,QAAAA,KAyEII,KAAO5B,SAAS6B,MAAM,OAAQ3B,YAEpC4B,OAAOC,QAAUH","file":"userModel.min.js","sourcesContent":["const crypto = require('crypto');\nconst mongoose = require('mongoose');\nconst validator = require('validator');\nconst bcrypt = require('bcryptjs');\n\nconst userSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    required: [true, 'Please tell us your name!']\n  },\n  email: {\n    type: String,\n    required: [true, 'Please provide your email'],\n    unique: true,\n    lowercase: true,\n    validate: [validator.isEmail, 'Please provide a valid email']\n  },\n  photo: String,\n  role: {\n    type: String,\n    enum: ['user', 'admin'],\n    default: 'user'\n  },\n  password: {\n    type: String,\n    required: [true, 'Please provide a password'],\n    minlength: 8,\n    select: false\n  },\n  passwordConfirm: {\n    type: String,\n    required: [true, 'Please confirm your password'],\n    validate: {\n      // This only works on CREATE and SAVE!!!\n      validator: function(el) {\n        return el === this.password;\n      },\n      message: 'Passwords are not the same!'\n    }\n  },\n  passwordChangedAt: Date,\n  passwordResetToken: String,\n  passwordResetExpires: Date,\n  active: {\n    type: Boolean,\n    default: true,\n    select: false\n  }\n});\n\n// // Change password for user functionality.\n// userSchema.pre('save', async function(next) {\n//   // Only run this function if password was actually modified\n//   if (!this.isModified('password')) return next();\n\n//   // Hash the password with cost of 12\n//   this.password = await bcrypt.hash(this.password, 12);\n\n//   // Delete passwordConfirm field\n//   this.passwordConfirm = undefined;\n//   next();\n// });\n\n// userSchema.pre('save', function(next) {\n//   if (!this.isModified('password') || this.isNew) return next();\n\n//   this.passwordChangedAt = Date.now() - 1000;\n//   next();\n// });\n\n// // Delete user functionality.\n// userSchema.pre(/^find/, function(next) {\n//   // this points to the current query\n//   this.find({ active: { $ne: false } });\n//   next();\n// });\n\n// // Compare passwords to validate.\n// userSchema.methods.correctPassword = async function(\n//   candidatePassword,\n//   userPassword\n// ) {\n//   return await bcrypt.compare(candidatePassword, userPassword);\n// };\n\n// userSchema.methods.changedPasswordAfter = function(JWTTimestamp) {\n//   if (this.passwordChangedAt) {\n//     const changedTimestamp = parseInt(\n//       this.passwordChangedAt.getTime() / 1000,\n//       10\n//     );\n\n//     return JWTTimestamp < changedTimestamp;\n//   }\n\n//   // False means NOT changed\n//   return false;\n// };\n\n// userSchema.methods.createPasswordResetToken = function() {\n//   const resetToken = crypto.randomBytes(32).toString('hex');\n\n//   this.passwordResetToken = crypto\n//     .createHash('sha256')\n//     .update(resetToken)\n//     .digest('hex');\n\n//   console.log({ resetToken }, this.passwordResetToken);\n\n//   this.passwordResetExpires = Date.now() + 10 * 60 * 1000;\n\n//   return resetToken;\n// };\n\nconst User = mongoose.model('User', userSchema);\n\nmodule.exports = User;\n"]}