{"version":3,"sources":["movieModel.js"],"names":["mongoose","require","movieSchema","Schema","name","type","String","required","unique","trim","maxlength","minlength","slug","duration","Number","ratingsAverage","min","max","set","val","Math","round","ratingsQuantity","description","imageCover","createdAt","Date","now","select","startDates","secretMovie","Boolean","toJSON","virtuals","toObject","Movie","model","module","exports"],"mappings":";;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB,C,CACA;AACA;AACA;;;AAEA,IAAMC,WAAW,GAAG,IAAIF,QAAQ,CAACG,MAAb,CAClB;AACEC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,0BAAP,CAFN;AAGJC,IAAAA,MAAM,EAAE,IAHJ;AAIJC,IAAAA,IAAI,EAAE,IAJF;AAKJC,IAAAA,SAAS,EAAE,CACT,EADS,EAET,yDAFS,CALP;AASJC,IAAAA,SAAS,EAAE,CAAC,EAAD,EAAK,yDAAL,CATP,CAUJ;;AAVI,GADR;AAaEC,EAAAA,IAAI,EAAEN,MAbR;AAcEO,EAAAA,QAAQ,EAAE;AACRR,IAAAA,IAAI,EAAES,MADE;AAERP,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,8BAAP;AAFF,GAdZ;AAkBEQ,EAAAA,cAAc,EAAE;AACdV,IAAAA,IAAI,EAAES,MADQ;AAEd,eAAS,GAFK;AAGdE,IAAAA,GAAG,EAAE,CAAC,CAAD,EAAI,0BAAJ,CAHS;AAIdC,IAAAA,GAAG,EAAE,CAAC,CAAD,EAAI,0BAAJ,CAJS;AAKdC,IAAAA,GAAG,EAAE,aAAAC,GAAG;AAAA,aAAIC,IAAI,CAACC,KAAL,CAAWF,GAAG,GAAG,EAAjB,IAAuB,EAA3B;AAAA,KALM,CAKwB;;AALxB,GAlBlB;AAyBEG,EAAAA,eAAe,EAAE;AACfjB,IAAAA,IAAI,EAAES,MADS;AAEf,eAAS;AAFM,GAzBnB;AA6BES,EAAAA,WAAW,EAAE;AACXlB,IAAAA,IAAI,EAAEC,MADK;AAEXG,IAAAA,IAAI,EAAE;AAFK,GA7Bf;AAiCEe,EAAAA,UAAU,EAAE;AACVnB,IAAAA,IAAI,EAAEC,MADI;AAEVC,IAAAA,QAAQ,EAAE,CAAC,IAAD,EAAO,iCAAP;AAFA,GAjCd;AAqCEkB,EAAAA,SAAS,EAAE;AACTpB,IAAAA,IAAI,EAAEqB,IADG;AAET,eAASA,IAAI,CAACC,GAAL,EAFA;AAGTC,IAAAA,MAAM,EAAE;AAHC,GArCb;AA0CEC,EAAAA,UAAU,EAAE,CAACH,IAAD,CA1Cd;AA2CEI,EAAAA,WAAW,EAAE;AACXzB,IAAAA,IAAI,EAAE0B,OADK;AAEX,eAAS;AAFE;AA3Cf,CADkB,EAiDlB;AACEC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GADV;AAEEC,EAAAA,QAAQ,EAAE;AAAED,IAAAA,QAAQ,EAAE;AAAZ;AAFZ,CAjDkB,CAApB,C,CAuDA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;AAEA,IAAME,KAAK,GAAGnC,QAAQ,CAACoC,KAAT,CAAe,OAAf,EAAwBlC,WAAxB,CAAd;AAEAmC,MAAM,CAACC,OAAP,GAAiBH,KAAjB","sourcesContent":["const mongoose = require('mongoose');\n// const slugify = require('slugify');\n// const User = require('./userModel');\n// const validator = require('validator');\n\nconst movieSchema = new mongoose.Schema(\n  {\n    name: {\n      type: String,\n      required: [true, 'A Movie must have a name'],\n      unique: true,\n      trim: true,\n      maxlength: [\n        40,\n        'A Movie name must have less or equal then 40 characters'\n      ],\n      minlength: [10, 'A Movie name must have more or equal then 10 characters']\n      // validate: [validator.isAlpha, 'Movie name must only contain characters']\n    },\n    slug: String,\n    duration: {\n      type: Number,\n      required: [true, 'A Movie must have a duration']\n    },\n    ratingsAverage: {\n      type: Number,\n      default: 4.5,\n      min: [1, 'Rating must be above 1.0'],\n      max: [5, 'Rating must be below 5.0'],\n      set: val => Math.round(val * 10) / 10 // 4.666666, 46.6666, 47, 4.7\n    },\n    ratingsQuantity: {\n      type: Number,\n      default: 0\n    },\n    description: {\n      type: String,\n      trim: true\n    },\n    imageCover: {\n      type: String,\n      required: [true, 'A Movie must have a cover image']\n    },\n    createdAt: {\n      type: Date,\n      default: Date.now(),\n      select: false\n    },\n    startDates: [Date],\n    secretMovie: {\n      type: Boolean,\n      default: false\n    }\n  },\n  {\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  }\n);\n\n// // movieSchema.index({ price: 1 });\n// movieSchema.index({ price: 1, ratingsAverage: -1 });\n// movieSchema.index({ slug: 1 });\n// movieSchema.index({ startLocation: '2dsphere' });\n\n// movieSchema.virtual('durationWeeks').get(function() {\n//   return this.duration / 7;\n// });\n\n// // Virtual populate\n// movieSchema.virtual('reviews', {\n//   ref: 'Review',\n//   foreignField: 'Movie',\n//   localField: '_id'\n// });\n\n// // DOCUMENT MIDDLEWARE: runs before .save() and .create()\n// movieSchema.pre('save', function(next) {\n//   this.slug = slugify(this.name, { lower: true });\n//   next();\n// });\n\n// // QUERY MIDDLEWARE\n// // movieSchema.pre('find', function(next) {\n// movieSchema.pre(/^find/, function(next) {\n//   this.find({ secretMovie: { $ne: true } });\n\n//   this.start = Date.now();\n//   next();\n// });\n\n// movieSchema.pre(/^find/, function(next) {\n//   this.populate({\n//     path: 'guides',\n//     select: '-__v -passwordChangedAt'\n//   });\n\n//   next();\n// });\n\n// movieSchema.post(/^find/, function(docs, next) {\n//   console.log(`Query took ${Date.now() - this.start} milliseconds!`);\n//   next();\n// });\n\nconst Movie = mongoose.model('Movie', movieSchema);\n\nmodule.exports = Movie;\n"],"file":"movieModel.dev.js"}