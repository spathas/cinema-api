{"version":3,"sources":["import-data.js"],"names":["fs","require","mongoose","dotenv","Title","Hall","User","config","path","DB","process","env","DATABASE","replace","DATABASE_PASSWORD","connect","useNewUrlParser","useCreateIndex","useFindAndModify","then","console","log","titles","JSON","parse","readFileSync","__dirname","halls","users","importData","create","validateBeforeSave","exit","deleteData","deleteMany","argv"],"mappings":";;AAAA,IAAMA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,IAAME,MAAM,GAAGF,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMG,KAAK,GAAGH,OAAO,CAAC,sBAAD,CAArB;;AACA,IAAMI,IAAI,GAAGJ,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAMK,IAAI,GAAGL,OAAO,CAAC,qBAAD,CAApB;;AAEAE,MAAM,CAACI,MAAP,CAAc;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAd;AAEA,IAAMC,EAAE,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,CAAqBC,OAArB,CACT,YADS,EAETH,OAAO,CAACC,GAAR,CAAYG,iBAFH,CAAX;AAKAZ,QAAQ,CACLa,OADH,CACWN,EADX,EACe;AACXO,EAAAA,eAAe,EAAE,IADN;AAEXC,EAAAA,cAAc,EAAE,IAFL;AAGXC,EAAAA,gBAAgB,EAAE;AAHP,CADf,EAMGC,IANH,CAMQ;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAY,2BAAZ,CAAN;AAAA,CANR,E,CAQA;;AACA,IAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWxB,EAAE,CAACyB,YAAH,WAAmBC,SAAnB,mBAA4C,OAA5C,CAAX,CAAf;AACA,IAAMC,KAAK,GAAGJ,IAAI,CAACC,KAAL,CAAWxB,EAAE,CAACyB,YAAH,WAAmBC,SAAnB,kBAA2C,OAA3C,CAAX,CAAd;AACA,IAAME,KAAK,GAAGL,IAAI,CAACC,KAAL,CAAWxB,EAAE,CAACyB,YAAH,WAAmBC,SAAnB,kBAA2C,OAA3C,CAAX,CAAd,C,CAEA;;AACA,IAAMG,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAETzB,KAAK,CAAC0B,MAAN,CAAaR,MAAb,CAFS;;AAAA;AAAA;AAAA,0CAGTjB,IAAI,CAACyB,MAAL,CAAYH,KAAZ,CAHS;;AAAA;AAAA;AAAA,0CAITrB,IAAI,CAACwB,MAAL,CAAYF,KAAZ,EAAmB;AAAEG,YAAAA,kBAAkB,EAAE;AAAtB,WAAnB,CAJS;;AAAA;AAKfX,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AALe;AAAA;;AAAA;AAAA;AAAA;AAOfD,UAAAA,OAAO,CAACC,GAAR;;AAPe;AASjBX,UAAAA,OAAO,CAACsB,IAAR;;AATiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB,C,CAYA;;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAET7B,KAAK,CAAC8B,UAAN,EAFS;;AAAA;AAGfd,UAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AAHe;AAAA;;AAAA;AAAA;AAAA;AAKfD,UAAAA,OAAO,CAACC,GAAR;;AALe;AAOjBX,UAAAA,OAAO,CAACsB,IAAR;;AAPiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAUA,IAAItB,OAAO,CAACyB,IAAR,CAAa,CAAb,MAAoB,UAAxB,EAAoC;AAClCN,EAAAA,UAAU;AACX,CAFD,MAEO,IAAInB,OAAO,CAACyB,IAAR,CAAa,CAAb,MAAoB,UAAxB,EAAoC;AACzCF,EAAAA,UAAU;AACX","sourcesContent":["const fs = require('fs');\nconst mongoose = require('mongoose');\nconst dotenv = require('dotenv');\nconst Title = require('../models/titleModel');\nconst Hall = require('../models/hallModel');\nconst User = require('../models/userModel');\n\ndotenv.config({ path: './config.env' });\n\nconst DB = process.env.DATABASE.replace(\n  '<PASSWORD>',\n  process.env.DATABASE_PASSWORD\n);\n\nmongoose\n  .connect(DB, {\n    useNewUrlParser: true,\n    useCreateIndex: true,\n    useFindAndModify: false\n  })\n  .then(() => console.log('DB connection successful!'));\n\n// READ JSON FILE\nconst titles = JSON.parse(fs.readFileSync(`${__dirname}/titles.json`, 'utf-8'));\nconst halls = JSON.parse(fs.readFileSync(`${__dirname}/halls.json`, 'utf-8'));\nconst users = JSON.parse(fs.readFileSync(`${__dirname}/users.json`, 'utf-8'));\n\n// IMPORT DATA INTO DB\nconst importData = async () => {\n  try {\n    await Title.create(titles);\n    await Hall.create(halls);\n    await User.create(users, { validateBeforeSave: false });\n    console.log('Data successfully loaded!');\n  } catch (err) {\n    console.log(err);\n  }\n  process.exit();\n};\n\n// DELETE ALL DATA FROM DB\nconst deleteData = async () => {\n  try {\n    await Title.deleteMany();\n    console.log('Data successfully deleted!');\n  } catch (err) {\n    console.log(err);\n  }\n  process.exit();\n};\n\nif (process.argv[2] === '--import') {\n  importData();\n} else if (process.argv[2] === '--delete') {\n  deleteData();\n}\n"],"file":"import-data.dev.js"}