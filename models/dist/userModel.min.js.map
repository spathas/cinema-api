{"version":3,"sources":["userModel.js"],"names":["mongoose","require","validator","Schema","name","bcrypt","String","type","unique","email","isEmail","lowercase","validate","enum","photo","required","minlength","password","select","passwordConfirm","el","this","message","userSchema","pre","next","regeneratorRuntime","async","_context","prev","isModified","abrupt","awrap","hash","sent","stop","passwordChangedAt","Date","now","find","active","$ne","methods","correctPassword","candidatePassword","userPassword","_context2","compare","changedPasswordAfter","JWTTimestamp","getTime","User","model","module","exports"],"mappings":"aAAA,IAAMA,SAAWC,QAAQ,YACnBC,UAAYD,QAAQ,aADpBD,OAAWC,QAAQ,YACnBC,WAAYD,SAAQE,OAAD,CAIvBC,KAAM,CAHFC,KAAMC,OAKRL,QAAS,EAAC,EAAM,4BAFlBG,MAAM,CACJG,KAAMD,OACNL,SAAU,EAAA,EAAM,6BAHeO,QAAA,EAKjCC,WAAO,EACLF,SAAMD,CAAAA,UADDI,QAAA,iCAGLF,MAAAA,OACAG,KAAAA,CACAC,KAAAA,OAV+BC,KAAA,CAAA,OAAA,SAYjCC,QAAOR,QAELC,SAAMD,CACNC,KAAAD,OACAS,SAAA,EAAS,EAAA,6BAhBsBC,UAAA,EAkBjCC,QAAU,GAERF,gBAAU,CACVC,KAAAA,OACAE,SAAQ,EAAA,EAAA,gCAtBuBF,UAAA,EAwBjCG,SAAAA,CAEEJ,UAAW,SAAMK,GACjBJ,OAAWI,IAHIC,KAAAJ,UAKbK,QAAA,kCADQC,WAAAC,IAAA,OAAA,SAAAC,GAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAH,MAAA,KAAA,EAAA,GA5BdJ,KAAAS,WAAA,YA4Bc,CAAAF,EAAAH,KAAA,EAAA,MAAA,OAAAG,EAAAG,OAAA,SA5BdN,KA4Bc,KAAA,EAAA,OAAAG,EAAAH,KAAA,EAAAC,mBAAAM,MAUS3B,OAAA4B,KAAAZ,KAAAJ,SAAA,KAVT,KAAA,EAUSI,KAAAJ,SAVTW,EAAAM,KAUSb,KAAAF,qBAEXW,EAFWL,IAVT,KAAA,EAAA,IAAA,MAAA,OAAAG,EAAAO,SAAA,KAAAd,QAsBdE,WAAWC,IAAI,OAAQ,SAASC,GAZT,IAAAJ,KAAAS,WAAA,aAAAT,KAEoBI,MAFpB,OAAAA,IAAAJ,KAAAe,kBAAAC,KAAAC,MAAA,IAAAb,MAAAF,WAAAC,IAAA,QAAA,SAAAC,GAOrBJ,KAAAkB,KAAA,CAAAC,OAAA,CAAAC,KAAA,KACAhB,MARqBF,WAAAmB,QAAAC,gBAAA,SAAAC,EAAAC,GAAA,OAAAnB,mBAAAC,MAAA,SAAAmB,GAAA,OAAA,OAAAA,EAAAjB,KAAAiB,EAAArB,MAAA,KAAA,EAAA,OAAAqB,EAAArB,KAAA,EAAAC,mBAAAM,MAAA3B,OAAA0C,QAAAH,EAAAC,IAAA,KAAA,EAAA,OAAAC,EAAAf,OAAA,SAAAe,EAAAZ,MAAA,KAAA,EAAA,IAAA,MAAA,OAAAY,EAAAX,WAYvBZ,WAAWC,QAAIwB,qBAAuB,SAAAC,GACpC,QAAI5B,KAACe,mBAQLa,EANyBZ,SACrBhB,KAAAe,kBAAAc,UAAA,IAJN,KAkCA,IAAMC,KAAOnD,SAASoD,MAAM,OAAQ7B,YArBC8B,OAAAC,QAAAH","file":"userModel.min.js","sourcesContent":["const mongoose = require('mongoose');\nconst validator = require('validator');\nconst bcrypt = require('bcryptjs');\n\nconst userSchema = mongoose.Schema({\n  name: {\n    type: String,\n    require: [true, 'A user must have a name']\n  },\n  email: {\n    type: String,\n    required: [true, 'Please provide your email'],\n    unique: true,\n    lowercase: true,\n    validate: [validator.isEmail, 'Please provide a valid email']\n  },\n  photo: String,\n  role: {\n    type: String,\n    enum: ['user', 'admin'],\n    default: 'user'\n  },\n  password: {\n    type: String,\n    required: [true, 'Please provide a password'],\n    minlength: 8,\n    select: false\n  },\n  passwordConfirm: {\n    type: String,\n    required: [true, 'Please confirm your password'],\n    minlength: 8,\n    validate: {\n      // This only works on CREATE and SAVE!!!\n      validator: function(el) {\n        return el === this.password;\n      },\n      message: 'Passwords are not the same!'\n    }\n  }\n});\n\nuserSchema.pre('save', async function(next) {\n  // Only run this function if password was actually modified\n  if (!this.isModified('password')) return next();\n\n  // Hash the password with cost of 12\n  this.password = await bcrypt.hash(this.password, 12);\n\n  // Delete passwordConfirm field\n  this.passwordConfirm = undefined;\n  next();\n});\n\nuserSchema.pre('save', function(next) {\n  if (!this.isModified('password') || this.isNew) return next();\n\n  this.passwordChangedAt = Date.now() - 1000;\n  next();\n});\n\nuserSchema.pre(/^find/, function(next) {\n  // this points to the current query\n  this.find({ active: { $ne: false } });\n  next();\n});\n\nuserSchema.methods.correctPassword = async function(\n  candidatePassword,\n  userPassword\n) {\n  return await bcrypt.compare(candidatePassword, userPassword);\n};\n\nuserSchema.methods.changedPasswordAfter = function(JWTTimestamp) {\n  if (this.passwordChangedAt) {\n    const changedTimestamp = parseInt(\n      this.passwordChangedAt.getTime() / 1000,\n      10\n    );\n\n    return JWTTimestamp < changedTimestamp;\n  }\n\n  // False means NOT changed\n  return false;\n};\n\nconst User = mongoose.model('User', userSchema);\n\nmodule.exports = User;\n"]}