{"version":3,"sources":["reviewModel.js"],"names":["mongoose","require","Title","reviewSchema","Schema","review","type","String","required","rating","Number","min","max","createdAt","Date","now","title","ObjectId","ref","user","toJSON","virtuals","toObject","index","unique","pre","next","populate","path","select","statics","calcAverageRatings","titleId","aggregate","$match","$group","_id","nRating","$sum","avgRating","$avg","stats","length","findByIdAndUpdate","ratingsQuantity","ratingsAverage","tour","post","constructor","findOne","r","Review","model","module","exports"],"mappings":"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","sourcesContent":["const mongoose = require('mongoose');\nconst Title = require('./titleModel');\n\nconst reviewSchema = new mongoose.Schema(\n  {\n    review: {\n      type: String,\n      required: [true, 'Review can not be empty!']\n    },\n    rating: {\n      type: Number,\n      min: 1,\n      max: 5\n    },\n    createdAt: {\n      type: Date,\n      default: Date.now\n    },\n    title: {\n      type: mongoose.Schema.ObjectId,\n      ref: 'Title',\n      required: [true, 'Review must belong to a movie title.']\n    },\n    user: {\n      type: mongoose.Schema.ObjectId,\n      ref: 'User',\n      required: [true, 'Review must belong to a user']\n    }\n  },\n  {\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true }\n  }\n);\n\nreviewSchema.index({ title: 1, user: 1 }, { unique: true });\n\nreviewSchema.pre(/^find/, function(next) {\n  this.populate({\n    path: 'user',\n    select: 'name photo'\n  });\n  next();\n});\n\nreviewSchema.statics.calcAverageRatings = async function(titleId) {\n  const stats = await this.aggregate([\n    {\n      $match: { title: titleId }\n    },\n    {\n      $group: {\n        _id: '$title',\n        nRating: { $sum: 1 },\n        avgRating: { $avg: '$rating' }\n      }\n    }\n  ]);\n\n  if (stats.length > 0) {\n    await Title.findByIdAndUpdate(titleId, {\n      ratingsQuantity: stats[0].nRating,\n      ratingsAverage: stats[0].avgRating\n    });\n  } else {\n    await Title.findByIdAndUpdate(titleId, {\n      ratingsQuantity: 0,\n      ratingsAverage: 4.5\n    });\n  }\n};\n\nreviewSchema.index({ tour: 1, user: 1 }, { unique: true });\n\nreviewSchema.post('save', function() {\n  // this points to current review\n  this.constructor.calcAverageRatings(this.title);\n});\n\n// findByIdAndUpdate\n// findByIdAndDelete\nreviewSchema.pre(/^findOneAnd/, async function(next) {\n  this.r = await this.findOne();\n  // console.log(this.r);\n  next();\n});\n\nreviewSchema.post(/^findOneAnd/, async function() {\n  // await this.findOne(); does NOT work here, query has already executed.\n  await this.r.constructor.calcAverageRatings(this.r.title);\n});\n\nconst Review = mongoose.model('Review', reviewSchema);\n\nmodule.exports = Review;\n"],"file":"reviewModel.dev.js"}