{"version":3,"sources":["userModel.js"],"names":["mongoose","require","validator","bcrypt","userSchema","Schema","name","type","String","email","required","unique","lowercase","validate","isEmail","photo","role","password","minlength","select","passwordConfirm","el","message","pre","next","isModified","hash","undefined","isNew","passwordChangedAt","Date","now","find","active","$ne","methods","correctPassword","candidatePassword","userPassword","compare","changedPasswordAfter","JWTTimestamp","changedTimestamp","parseInt","getTime","User","model","module","exports"],"mappings":"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","sourcesContent":["const mongoose = require('mongoose');\nconst validator = require('validator');\nconst bcrypt = require('bcryptjs');\n\nconst userSchema = mongoose.Schema({\n  name: {\n    type: String,\n    require: [true, 'A user must have a name']\n  },\n  email: {\n    type: String,\n    required: [true, 'Please provide your email'],\n    unique: true,\n    lowercase: true,\n    validate: [validator.isEmail, 'Please provide a valid email']\n  },\n  photo: String,\n  role: {\n    type: String,\n    enum: ['user', 'admin'],\n    default: 'user'\n  },\n  password: {\n    type: String,\n    required: [true, 'Please provide a password'],\n    minlength: 8,\n    select: false\n  },\n  passwordConfirm: {\n    type: String,\n    required: [true, 'Please confirm your password'],\n    minlength: 8,\n    validate: {\n      // This only works on CREATE and SAVE!!!\n      validator: function(el) {\n        return el === this.password;\n      },\n      message: 'Passwords are not the same!'\n    }\n  }\n});\n\nuserSchema.pre('save', async function(next) {\n  // Only run this function if password was actually modified\n  if (!this.isModified('password')) return next();\n\n  // Hash the password with cost of 12\n  this.password = await bcrypt.hash(this.password, 12);\n\n  // Delete passwordConfirm field\n  this.passwordConfirm = undefined;\n  next();\n});\n\nuserSchema.pre('save', function(next) {\n  if (!this.isModified('password') || this.isNew) return next();\n\n  this.passwordChangedAt = Date.now() - 1000;\n  next();\n});\n\nuserSchema.pre(/^find/, function(next) {\n  // this points to the current query\n  this.find({ active: { $ne: false } });\n  next();\n});\n\nuserSchema.methods.correctPassword = async function(\n  candidatePassword,\n  userPassword\n) {\n  return await bcrypt.compare(candidatePassword, userPassword);\n};\n\nuserSchema.methods.changedPasswordAfter = function(JWTTimestamp) {\n  if (this.passwordChangedAt) {\n    const changedTimestamp = parseInt(\n      this.passwordChangedAt.getTime() / 1000,\n      10\n    );\n\n    return JWTTimestamp < changedTimestamp;\n  }\n\n  // False means NOT changed\n  return false;\n};\n\nconst User = mongoose.model('User', userSchema);\n\nmodule.exports = User;\n"],"file":"userModel.dev.js"}