{"version":3,"sources":["authController.js"],"names":["crypto","require","promisify","jwt","User","catchAsync","sendEmail","AppError","signToken","id","sign","process","env","JWT_SECRET","expiresIn","JWT_EXPIRES_IN","createAndSendToken","user","statusCode","res","token","_id","cookieOptions","expires","Date","now","JWT_COOKIE_EXPIRES_IN","httpOnly","NODE_ENV","secure","cookie","password","undefined","status","json","exports","signup","req","next","create","name","body","email","passwordConfirm","role","newUser","login","findOne","select","correctPassword","protect","headers","authorization","startsWith","split","verify","decoded","findById","currentUser","changedPasswordAfter","iat","Error","restrictTo","roles","includes","forgotPassword","resetToken","createPasswordResetToken","save","validateBeforeSave","resetURL","protocol","get","message","subject","passwordResetToken","passwordResetExpires","resetPassword","hashedToken","createHash","update","params","digest","$gt","updatePassword","newPassword","newPasswordConfirm"],"mappings":"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","sourcesContent":["const crypto = require('crypto');\nconst { promisify } = require('util');\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/userModel');\nconst catchAsync = require('../utils/catchAsync');\nconst sendEmail = require('../utils/email');\nconst AppError = require('../utils/appError');\n\nconst signToken = id => {\n  return jwt.sign({ id }, process.env.JWT_SECRET, {\n    expiresIn: process.env.JWT_EXPIRES_IN\n  });\n};\n\nconst createAndSendToken = (user, statusCode, res) => {\n  const token = signToken(user._id);\n\n  const cookieOptions = {\n    expires: new Date(\n      Date.now() + process.env.JWT_COOKIE_EXPIRES_IN * 24 * 60 * 60 * 1000\n    ),\n    httpOnly: true\n  };\n\n  if (process.env.NODE_ENV === 'production') cookieOptions.secure = true;\n  res.cookie('jwt', token, cookieOptions);\n\n  user.password = undefined;\n\n  res.status(statusCode).json({\n    status: 'success',\n    token,\n    user\n  });\n};\n\nexports.signup = catchAsync(async (req, res, next) => {\n  const newUser = await User.create({\n    name: req.body.name,\n    email: req.body.email,\n    password: req.body.password,\n    passwordConfirm: req.body.passwordConfirm,\n    role: req.body.role\n  });\n  createAndSendToken(newUser, 201, res);\n});\n\nexports.login = catchAsync(async (req, res, next) => {\n  const { email, password } = req.body;\n\n  // 1) Check if email and password are existing.\n  if (!email || !password) {\n    return next(new AppError('Please enter a valid email and password', 400));\n  }\n\n  // 2) Check if User exists and password is valid.\n  const user = await User.findOne({ email }).select('+password');\n  //{email} = email: email ---- '+password' to detour the non selected command.\n\n  if (!user || !(await user.correctPassword(password, user.password))) {\n    return next(new AppError('Incorrect email or password', 401));\n  }\n\n  // 3) If everything is OK, sent token to client.\n  createAndSendToken(user, 200, res);\n});\n\nexports.protect = catchAsync(async (req, res, next) => {\n  // 1) Get the token and check if it exists.\n  let token;\n  if (\n    req.headers.authorization &&\n    req.headers.authorization.startsWith('Bearer')\n  ) {\n    token = req.headers.authorization.split(' ')[1];\n  }\n\n  if (!token) {\n    return next(new AppError('Please log in to get access.', 401));\n  }\n\n  // 2) Verification token.\n  const decoded = await promisify(jwt.verify)(token, process.env.JWT_SECRET);\n\n  // 3) Check if user still exists.\n  const currentUser = await User.findById(decoded.id);\n\n  if (!currentUser) {\n    return next(new AppError('User does not exist.', 401));\n  }\n  // 4) Check if user changed password after the token was issued.\n  if (currentUser.changedPasswordAfter(decoded.iat)) {\n    return next(\n      new Error('User recently changed password. Please log in again', 401)\n    );\n  }\n\n  // Access to protected route.\n  req.user = currentUser;\n  next();\n});\n\nexports.restrictTo = (...roles) => {\n  return (req, res, next) => {\n    // Roles ['admin', 'lead-guid']\n    if (!roles.includes(req.user.role)) {\n      return next(\n        new AppError('You do not have permission to perform this action.', 403)\n      );\n    }\n\n    next();\n  };\n};\n\nexports.forgotPassword = catchAsync(async (req, res, next) => {\n  // 1) Get user based on POSTed email\n  const user = await User.findOne({ email: req.body.email });\n  if (!user) {\n    return next(new AppError('There is no user with email address.', 404));\n  }\n\n  // 2) Generate the random reset token\n  const resetToken = user.createPasswordResetToken();\n  await user.save({ validateBeforeSave: false });\n\n  // 3) Send it to user's email\n  const resetURL = `${req.protocol}://${req.get(\n    'host'\n  )}/api/v1/users/resetPassword/${resetToken}`;\n\n  const message = `Forgot your password? Submit a PATCH request with your new password and passwordConfirm to: ${resetURL}.\\nIf you didn't forget your password, please ignore this email!`;\n\n  try {\n    await sendEmail({\n      email: user.email,\n      subject: 'Your password reset token (valid for 10 min)',\n      message\n    });\n\n    res.status(200).json({\n      status: 'success',\n      message: 'Token sent to email!'\n    });\n  } catch (err) {\n    user.passwordResetToken = undefined;\n    user.passwordResetExpires = undefined;\n    await user.save({ validateBeforeSave: false });\n\n    return next(\n      new AppError('There was an error sending the email. Try again later!'),\n      500\n    );\n  }\n});\n\nexports.resetPassword = catchAsync(async (req, res, next) => {\n  // 1) Get user based on the token.\n  const hashedToken = crypto\n    .createHash('sha256')\n    .update(req.params.token)\n    .digest('hex');\n\n  const user = await User.findOne({\n    passwordResetToken: hashedToken,\n    passwordResetExpires: { $gt: Date.now() }\n  });\n  // 2) If token has not expired, and there is a user, set the new password.\n  if (!user) {\n    return next(new AppError('Token is invalid or has expired', 400));\n  }\n  user.password = req.body.password;\n  user.passwordConfirm = req.body.passwordConfirm;\n  user.passwordResetToken = undefined;\n  user.passwordResetExpires = undefined;\n  await user.save();\n  // 3) Update changedPasswordAt property for the user.\n  // 4) Log the user in, send JWT.\n  createAndSendToken(user, 200, res);\n});\n\nexports.updatePassword = catchAsync(async (req, res, next) => {\n  // 1) Get user from collection.\n  const user = await User.findById(req.user.id).select('+password');\n  // console.log(user);\n  if (!user) {\n    return next(\n      new AppError('Can authorize your account. Please log in again.', 404)\n    );\n  }\n  // 2) Check if POSTed current password is correct.\n  if (!(await user.correctPassword(req.body.password, user.password))) {\n    return next(new AppError('Incorrect password', 401));\n  }\n  // 3) If so, update password.\n  user.password = req.body.newPassword;\n  user.passwordConfirm = req.body.newPasswordConfirm;\n  await user.save();\n  // 4) Log user in, send JWT.\n  createAndSendToken(user, 200, res);\n});\n"],"file":"authController.dev.js"}