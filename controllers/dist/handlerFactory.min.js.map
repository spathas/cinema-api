{"version":3,"sources":["handlerFactory.js"],"names":["catchAsync","require","AppError","exports","req","res","next","regeneratorRuntime","async","_context","prev","awrap","findByIdAndDelete","params","id","sent","abrupt","status","json","data","stop","updateOne","Model","doc","findByIdAndUpdate","body","new","runValidators","createOne","_context3","create","getOne","popOptions","query","_context4","findById","path","populate","filter","features","_context5","titleId","title","APIFeatures","find","sort","limitFields","paginate","results","length"],"mappings":"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","file":"handlerFactory.min.js","sourcesContent":["const catchAsync = require('../utils/catchAsync');\nconst AppError = require('../utils/appError');\nconst APIFeatures = require('../utils/apiFeatures');\n\nexports.deleteOne = Model =>\n  catchAsync(async (req, res, next) => {\n    const doc = await Model.findByIdAndDelete(req.params.id);\n\n    if (!doc) {\n      return next(new AppError('No document found with that ID', 404));\n    }\n\n    res.status(204).json({\n      status: 'success',\n      data: null\n    });\n  });\n\nexports.updateOne = Model =>\n  catchAsync(async (req, res, next) => {\n    const doc = await Model.findByIdAndUpdate(req.params.id, req.body, {\n      new: true,\n      runValidators: true\n    });\n\n    if (!doc) {\n      return next(new AppError('No document found with that ID', 404));\n    }\n\n    res.status(200).json({\n      status: 'success',\n      data: {\n        data: doc\n      }\n    });\n  });\n\nexports.createOne = Model =>\n  catchAsync(async (req, res, next) => {\n    const doc = await Model.create(req.body);\n\n    res.status(201).json({\n      status: 'success',\n      data: {\n        data: doc\n      }\n    });\n  });\n\nexports.getOne = (Model, popOptions) =>\n  catchAsync(async (req, res, next) => {\n    let query = Model.findById(req.params.id).populate({\n      path: 'reviews',\n      select: 'name '\n    });\n    if (popOptions) query = query.populate(popOptions);\n    const doc = await query;\n\n    if (!doc) {\n      return next(new AppError('No document found with that ID', 404));\n    }\n\n    res.status(200).json({\n      status: 'success',\n      data: {\n        data: doc\n      }\n    });\n  });\n\nexports.getAll = Model =>\n  catchAsync(async (req, res, next) => {\n    // To allow for nested GET reviews on title (hack)\n    let filter = {};\n    if (req.params.titleId) filter = { title: req.params.titleId };\n\n    const features = new APIFeatures(Model.find(filter), req.query)\n      .filter()\n      .sort()\n      .limitFields()\n      .paginate();\n    // const doc = await features.query.explain();\n    const doc = await features.query;\n\n    // SEND RESPONSE\n    res.status(200).json({\n      status: 'success',\n      results: doc.length,\n      data: {\n        data: doc\n      }\n    });\n  });\n"]}